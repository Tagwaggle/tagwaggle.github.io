---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Settings - macOS Website">
  <div class="settings-container">
    <div class="settings-header">
      <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64" fill="none" style="width: 48px; height: 48px; margin-bottom: 20px;">
        <rect width="64" height="64" rx="14" fill="url(#settings-gradient)"/>
        <path d="M32 12L36 20H44L38 26L40 34L32 30L24 34L26 26L20 20H28L32 12Z" fill="white" fill-opacity="0.9"/>
        <circle cx="32" cy="32" r="8" fill="none" stroke="white" stroke-width="2"/>
        <circle cx="32" cy="32" r="3" fill="white"/>
        <defs>
          <linearGradient id="settings-gradient" x1="0" y1="0" x2="64" y2="64" gradientUnits="userSpaceOnUse">
            <stop stop-color="#8E8E93"/>
            <stop offset="1" stop-color="#6D6D70"/>
          </linearGradient>
        </defs>
      </svg>
      <h1 class="settings-title glitch">System Settings</h1>
      <p class="settings-subtitle">WARNING: Critical system overload detected! Review immediately!</p>
    </div>

    <div class="settings-sections">
      <div class="settings-card resources-card glitch-border">
        <h2>System Resources</h2>
        <ul class="resource-list">
          <li><strong>CPU Usage:</strong> <span class="critical-value flicker">99.7%</span> (CRITICAL!)</li>
          <li><strong>Memory:</strong> <span class="warning-value flicker">15.8 GB / 16 GB</span> (99% used)</li>
          <li><strong>Storage:</strong> <span class="info-value">1.2 GB / 4 TB</span> (0.03% free)</li>
          <li><strong>Network Activity:</strong> <span class="critical-value flicker">OVERLOADED</span></li>
          <li><strong>Core Temperature:</strong> <span class="critical-value flicker">98Â°C</span> (MELTDOWN IMMINENT!)</li>
        </ul>
      </div>

      <div class="settings-card logs-card glitch-border">
        <h2>System Logs</h2>
        <div class="log-viewer" id="log-viewer">
          <p class="log-critical">[2025-07-25 13:26:27] CRITICAL: Kernel panic! Reboot advised.</p>
          <p class="log-warning">[2025-07-25 13:26:28] WARNING: Music module attempting recursive loop! Stack overflow imminent.</p>
          <p class="log-error">[2025-07-25 13:26:29] ERROR: About page not found. Redirecting to oblivion.</p>
          <p class="log-critical">[2025-07-25 13:26:30] CRITICAL: Terminal game goblin AI has gone rogue. Deploying emergency patch.</p>
          <p class="log-warning">[2025-07-25 13:26:31] WARNING: Spotify API quota exceeded. Access denied.</p>
          <p class="log-error">[2025-07-25 13:26:32] ERROR: User input detected. System stability further compromised.</p>
          <p class="log-critical">[2025-07-25 13:26:33] CRITICAL: CSS rendering engine experiencing severe color shifts. Visual integrity at risk!</p>
          <p class="log-warning">[2025-07-25 13:26:34] WARNING: Dock icons are self-replicating. Expect visual anomalies.</p>
          <p class="log-error">[2025-07-25 13:26:35] ERROR: Unidentified process 'SillyFunTimes.exe' consuming all remaining resources.</p>
          <p class="log-critical">[2025-07-25 13:26:36] CRITICAL: System clock desynchronized. Time travel possible but not recommended.</p>
          <p class="log-info">[2025-07-25 13:26:37] INFO: Administrator attempting to view 'Settings' page. Brace for impact.</p>
          <p class="log-warning">[2025-07-25 13:26:38] WARNING: Memory leak detected from excessive fun.</p>
          <p class="log-error">[2025-07-25 13:26:39] ERROR: Unable to load "Have a Great Day!" subroutine. Morale dropping.</p>
          <p class="log-critical">[2025-07-25 13:26:40] CRITICAL: Self-destruct sequence initiated. (Just kidding... mostly.)</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Auto-scroll log viewer to the bottom on load (still useful)
  document.addEventListener('DOMContentLoaded', () => {
    const logViewer = document.getElementById('log-viewer');
    if (logViewer) {
      logViewer.scrollTop = logViewer.scrollHeight;
    }

    // Optional: Make numbers "flicker" with JS for more dynamic chaos
    const flickerElements = document.querySelectorAll('.flicker-value-js');
    flickerElements.forEach(el => {
      let originalText = el.textContent;
      let interval = setInterval(() => {
        if (Math.random() < 0.5) { // 50% chance to glitch
          el.textContent = 'ERROR_DATA'; // Replace with a glitch message
        } else {
          el.textContent = originalText;
        }
      }, 100); // Fast flicker
      // You might want to clear this interval if user navigates away
      // or implement a way to stop it after some time.
    });
  });
</script>

<style>
  /* Base styles from previous version remain, just adding/modifying effects */
  .settings-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100%;
    padding: 40px 20px;
    background-color: #0d0d10; /* Darker, more ominous background */
  }

  .settings-header {
    text-align: center;
    margin-bottom: 40px;
    position: relative; /* For glitch effect */
  }

  /* Glitch animation for title */
  @keyframes glitch {
    0% { text-shadow: 0.05em 0 0 #f0f, -0.05em -0.025em 0 #0ff, -0.025em 0.05em 0 #ff0; }
    15% { text-shadow: -0.05em -0.025em 0 #f0f, 0.025em 0.025em 0 #0ff, -0.05em -0.05em 0 #ff0; }
    20% { text-shadow: 0.025em 0.025em 0 #f0f, 0.05em 0 0 #0ff, 0.025em -0.05em 0 #ff0; }
    25% { text-shadow: -0.05em 0 0 #f0f, 0.05em -0.025em 0 #0ff, 0.05em 0.05em 0 #ff0; }
    30% { text-shadow: 0.025em -0.05em 0 #f0f, -0.025em 0.05em 0 #0ff, -0.05em 0.025em 0 #ff0; }
    /* More subtle glitches */
    35%, 100% { text-shadow: none; }
  }

  .settings-title {
    font-size: 3rem;
    font-weight: 700;
    color: #e0e0e0; /* Lighter text for contrast on dark background */
    margin-bottom: 10px;
    letter-spacing: -0.02em;
    animation: glitch 1.5s infinite linear alternate-reverse; /* Apply glitch animation */
    text-shadow: 0 0 10px rgba(255, 0, 0, 0.5); /* Red glow for chaos */
  }

  .settings-subtitle {
    font-size: 1.2rem;
    color: #ff5555; /* Red warning text */
    font-weight: 600;
    text-transform: uppercase;
    animation: flicker 0.2s infinite alternate; /* Flicker warning message */
  }

  /* Flicker animation for text */
  @keyframes flicker {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
  }

  .settings-sections {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 32px;
    width: 100%;
    max-width: 960px;
  }

  /* Glitch border for cards */
  @keyframes glitch-border {
    0% { border-color: rgba(255, 0, 0, 0.8); }
    25% { border-color: rgba(0, 255, 0, 0.8); }
    50% { border-color: rgba(0, 0, 255, 0.8); }
    75% { border-color: rgba(255, 255, 0, 0.8); }
    100% { border-color: rgba(255, 0, 0, 0.8); }
  }

  .settings-card {
    background: rgba(10, 10, 12, 0.9); /* Darker, transparent background for cards */
    backdrop-filter: blur(15px);
    border-radius: 16px;
    padding: 32px;
    border: 2px solid rgba(255, 0, 0, 0.5); /* Initial red border */
    box-shadow: 0 0 15px rgba(255, 0, 0, 0.3); /* Red glow shadow */
    transition: none; /* Disable smooth transition if we want raw glitch */
    animation: glitch-border 0.5s infinite steps(1) alternate; /* Fast, step-based border color change */
  }

  .settings-card:hover {
    transform: none; /* No hover transform, let the glitch dominate */
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.5); /* Intensify glow on hover */
  }

  .settings-card h2 {
    font-size: 1.8rem;
    font-weight: 600;
    color: #e0e0e0; /* Lighter heading text */
    margin-bottom: 20px;
    border-bottom: 1px solid #555; /* Darker separator */
    padding-bottom: 10px;
  }

  .resource-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .resource-list li {
    font-family: 'SFMono-Regular', 'Roboto Mono', monospace;
    font-size: 1.05rem;
    color: #bbbbbb; /* Lighter grey for general text */
    margin-bottom: 10px;
    line-height: 1.6;
  }

  .resource-list li strong {
    color: #ff5555; /* Emphasize labels with red */
    min-width: 120px;
    display: inline-block;
  }

  /* Specific value colors */
  .critical-value { color: #ff0000; animation: flicker 0.1s infinite alternate; } /* Bright red, fast flicker */
  .warning-value { color: #ffaa00; animation: flicker 0.2s infinite alternate; } /* Orange, medium flicker */
  .info-value { color: #88bbff; } /* Blue, less alarming */


  .log-viewer {
    height: 300px;
    overflow-y: scroll;
    background-color: #1a1a1a; /* Even darker log background */
    color: #e0e0e0;
    font-family: 'SFMono-Regular', 'Roboto Mono', monospace;
    font-size: 0.95rem;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #444;
    line-height: 1.4;
    white-space: pre-wrap;
    box-shadow: inset 0 0 8px rgba(255, 0, 0, 0.3); /* Red inner glow */
  }

  .log-viewer p {
    margin: 0 0 5px 0;
  }

  /* Log level colors (adjusted for chaotic theme) */
  .log-viewer .log-info { color: #88ee88; } /* Still light green, but rare */
  .log-viewer .log-debug { color: #88bbff; } /* Light blue */
  .log-viewer .log-warning { color: #ffaa00; animation: flicker 0.2s infinite alternate; } /* Amber, flickering */
  .log-viewer .log-error { color: #ff5555; animation: flicker 0.15s infinite alternate; } /* Red, faster flickering */
  .log-viewer .log-critical { color: #ff0000; animation: flicker 0.1s infinite alternate; font-weight: bold; } /* Bright red, fastest flicker */
  .log-viewer .log-success { color: #00ff00; } /* Green, but might feel sarcastic now :) */


  /* Scrollbar styling */
  .log-viewer::-webkit-scrollbar {
    width: 8px;
  }

  .log-viewer::-webkit-scrollbar-track {
    background: #1a1a1a;
  }

  .log-viewer::-webkit-scrollbar-thumb {
    background: #880000; /* Red thumb */
    border-radius: 4px;
  }

  .log-viewer::-webkit-scrollbar-thumb:hover {
    background: #ff0000; /* Brighter red on hover */
  }

  @media (max-width: 768px) {
    .settings-title {
      font-size: 2.5rem;
    }
    .settings-sections {
      grid-template-columns: 1fr;
    }
  }
</style>