---
import MenuBar from '../components/MenuBar.astro';
import Dock from '../components/Dock.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="macOS-inspired website" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
  </head>
  <body>
    <div class="desktop">
      <div class="menu-bar-container">
        <div class="menu-bar" id="menuBar">
          <MenuBar />
        </div>
      </div>
      
      <main class="main-content">
        <slot />
      </main>
      
      <div class="dock-container">
        <div class="dock" id="dock">
          <Dock />
        </div>
      </div>
    </div>
    
    <style>
      @import url('../styles/global.css');
    </style>
    
 <script>
  // Client-side navigation handling (no change needed here)
  document.addEventListener('DOMContentLoaded', function() {
    const menuLinks = document.querySelectorAll('.menu-link');
    menuLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (href) {
          window.location.href = href;
        }
      });
    });

    // --- Dock hover effects ---
    const dockIcons = document.querySelectorAll('.dock-icon');
    const dock = document.getElementById('dock');

    // Function to check if it's currently considered a mobile view
    const isMobileView = () => window.matchMedia("(max-width: 768px)").matches;

    dockIcons.forEach(icon => {
      icon.addEventListener('mouseenter', function() {
        // Only apply complex hover effects if NOT in mobile view
        if (!isMobileView()) {
          this.style.transform = 'translateY(-20px) scale(1.5)';
          this.style.zIndex = '10';
          
          const allIcons = Array.from(dockIcons);
          const currentIndex = allIcons.indexOf(this);
          
          // Scale left neighbor
          if (currentIndex > 0) {
            allIcons[currentIndex - 1].style.transform = 'translateY(-10px) scale(1.2)';
          }
          
          // Scale right neighbor
          if (currentIndex < allIcons.length - 1) {
            allIcons[currentIndex + 1].style.transform = 'translateY(-10px) scale(1.2)';
          }
        }
      });
      
      icon.addEventListener('mouseleave', function() {
        // Only reset complex hover effects if NOT in mobile view
        if (!isMobileView()) {
          setTimeout(() => {
            // Only reset if the mouse has truly left the entire dock area
            if (!dock.matches(':hover')) {
              dockIcons.forEach(icon => {
                icon.style.transform = 'translateY(0) scale(1)';
                icon.style.zIndex = '1';
              });
            }
          }, 100); // Small delay before resetting
        }
      });
    });
    
    // Reset all icons when mouse leaves dock container (full reset)
    dock.addEventListener('mouseleave', function() {
      // Apply full reset only if NOT in mobile view
      if (!isMobileView()) {
        dockIcons.forEach(icon => {
          icon.style.transform = 'translateY(0) scale(1)';
          icon.style.zIndex = '1';
        });
      }
    });

    // Optional: Add a resize listener to ensure styles are correct if the window is resized
    // and crosses the mobile/desktop threshold without a full page reload.
    let currentIsMobile = isMobileView();
    window.addEventListener('resize', () => {
      const newIsMobile = isMobileView();
      if (currentIsMobile !== newIsMobile) {
        // If the mobile state changed, force reset all inline styles
        dockIcons.forEach(icon => {
          icon.style.transform = ''; // Clear inline transform
          icon.style.zIndex = '';    // Clear inline z-index
        });
        currentIsMobile = newIsMobile; // Update state
      }
    });
  });
</script>
  </body>
</html>
